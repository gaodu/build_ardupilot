#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build ardupilot

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'true'

env:
  REPO_URL: https://github.com/gaodu/ardupilot
  REPO_BRANCH: master

  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04



    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
      
        sudo apt-get update
        sudo apt-get install git

        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH
        
    - name: Update feeds
      run: cd ardupilot/Tools/environment_install

    - name: Install feeds
      run: ./install-prereqs-ubuntu.sh

    - name: Load custom configuration
      run:  cd ardupilot
#      git submodule update --init --recursive
#      ./waf configure --board fmuv3
#      ./waf copter





    # - name: Check space usage
      # if: (!cancelled())
      # run: df -hT

    # - name: Upload bin directory
      # uses: actions/upload-artifact@main
      # if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      # with:
        # name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        # path: openwrt/bin

    # - name: Organize files
      # id: organize
      # if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      # run: |
        # cd openwrt/bin/targets/*/*
        # rm -rf packages
        # echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        # echo "::set-output name=status::success"

    # - name: Upload firmware directory
      # uses: actions/upload-artifact@main
      # if: steps.organize.outputs.status == 'success' && !cancelled()
      # with:
        # name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        # path: ${{ env.FIRMWARE }}

    # - name: Generate release tag
      # id: tag
      # if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      # run: |
        # echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        # touch release.txt
        # [ $UPLOAD_COWTRANSFER = true ] && echo "ðŸ”— [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        # [ $UPLOAD_WETRANSFER = true ] && echo "ðŸ”— [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        # echo "::set-output name=status::success"

    # - name: Upload firmware to release
      # uses: softprops/action-gh-release@v1
      # if: steps.tag.outputs.status == 'success' && !cancelled()
      # env:
        # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # with:
        # tag_name: ${{ steps.tag.outputs.release_tag }}
        # body_path: release.txt
        # files: ${{ env.FIRMWARE }}/*

    # - name: Delete workflow runs
      # uses: GitRML/delete-workflow-runs@main
      # with:
        # retain_days: 1
        # keep_minimum_runs: 3

    # - name: Remove old Releases
      # uses: dev-drprasad/delete-older-releases@v0.1.0
      # if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      # with:
        # keep_latest: 3
        # delete_tags: true
      # env:
        # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
